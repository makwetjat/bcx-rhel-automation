pipeline {
    agent any
    environment {
        SSH_CREDENTIALS_ID = 'ansible-bcx'
    }
    parameters {
        string(name: 'CLIENT_NAME', defaultValue: 'servername', description: 'Client name prefix for server names')
        string(name: 'START_INDEX', defaultValue: '1', description: 'Start index for server names')
        string(name: 'END_INDEX', defaultValue: '3', description: 'End index for server names')
    }
    stages {
        stage('Execute Remote Script') {
            steps {
                script {
                    def clientName = params.CLIENT_NAME
                    def startIndex = params.START_INDEX.toInteger()
                    def endIndex = params.END_INDEX.toInteger()

                    for (int i = startIndex; i <= endIndex; i++) {
                        def serverName = "${clientName}${i}"
                        
                        withCredentials([usernamePassword(credentialsId: SSH_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            try {
                                // Upload script to remote server
                                sshPut remote: [
                                    name: serverName,
                                    host: serverName,
                                    port: 22,
                                    user: USERNAME,
                                    password: PASSWORD,
                                    allowAnyHosts: true
                                ], from: 'C:\\ProgramData\\Jenkins\\.scripts\\rm-java.sh', into: '/tmp/rm-java.sh'
                                
                                // Execute the remote command and capture the result
                                def result = sshCommand remote: [
                                    name: serverName,
                                    host: serverName,
                                    port: 22,
                                    user: USERNAME,
                                    password: PASSWORD,
                                    allowAnyHosts: true
                                ], command: "bash /tmp/rm-java.sh"
                                
                                // Print the result for debugging
                                echo "Result from ${serverName}: ${result}"

                                // Cleanup remote script
                                sshCommand remote: [
                                    name: serverName,
                                    host: serverName,
                                    port: 22,
                                    user: USERNAME,
                                    password: PASSWORD,
                                    allowAnyHosts: true
                                ], command: 'rm -f /tmp/rm-java.sh'
                                
                            } catch (Exception e) {
                                echo "Failed to execute script on ${serverName}: ${e.message}"
                            }
                        }
                    }
                }
            }
        }
    }
}
