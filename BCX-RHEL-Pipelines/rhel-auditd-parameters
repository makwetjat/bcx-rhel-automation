pipeline {
    agent any
    environment {
        SSH_CREDENTIALS_ID = 'ansible-bcx'
    }
    parameters {
        string(name: 'CLIENT_NAME', defaultValue: 'tcenhvbssprd', description: 'Client name prefix for server names')
        string(name: 'START_INDEX', defaultValue: '1', description: 'Start index for server names')
        string(name: 'END_INDEX', defaultValue: '1', description: 'End index for server names')
    }
    stages {
        stage('Execute Remote Script') {
            steps {
                script {
                    def clientName = params.CLIENT_NAME
                    def startIndex = params.START_INDEX.toInteger()
                    def endIndex = params.END_INDEX.toInteger()
                    for (int i = startIndex; i <= endIndex; i++) {
                        def serverName = "${clientName}${i}"

                        withCredentials([usernamePassword(credentialsId: env.SSH_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            // Upload script to remote server
                            sshPut remote: [
                                name: serverName,
                                host: serverName,
                                port: 22,
                                user: USERNAME,
                                password: PASSWORD,
                                allowAnyHosts: true
                            ], from: 'C:\\ProgramData\\Jenkins\\.scripts\\auditd-parameters.sh', into: '/tmp/auditd-parameters.sh'

                            // Execute the remote command and capture the result
                            def result = sshCommand remote: [
                                name: serverName,
                                host: serverName,
                                port: 22,
                                user: USERNAME,
                                password: PASSWORD,
                                allowAnyHosts: true
                            ], command: 'bash /tmp/auditd-parameters.sh'
                            
                            // Print message if "Updating" is found in the result
                            if (result.contains("Updating")) {
                                echo "SERVER ${serverName} auditd's parameters have been updated."
                            } else {
                                echo "Executed script on ${serverName} and Config is up to date."
                            }
                        }
                    }
                }
            }
        }
    }
}

